Python for Web Developers 
Learning Journal


Exercise 2.2: Django Project Set Up

Learning Goals

? Describe the basic structure of a Django project 
? Summarize the difference between projects and apps
? Create a Django project and run it locally
? Create a superuser for a Django web application

Reflection Questions

1. Suppose you’re in an interview. The interviewer gives you their company’s website as an example, asking you to convert the website and its different parts into Django terms. How would you proceed? For this question, you can think about your dream company and look at their website for reference. To convert a company's website into Django terms during an interview, I would start by identifying models for key website components such as users, articles, products, and more. Then, I would create views for each webpage, connecting them to corresponding URL patterns and templates that mirror the website's structure and design. Next, I'd set up URL configurations to route requests to the appropriate views based on the website's navigation. Additionally, I would manage static and media files using Django's capabilities for CSS, JavaScript, images, and other assets. Forms would be implemented for user interactions like registrations, inquiries, or purchases, and Django's authentication system would be utilized for user management, including login, registration, and profiles. Lastly, I would organize the project using Django apps, with each app handling a specific feature or section of the website (e.g., Blog, Store, Contact).
(Hint: In the Exercise, you saw the example of the CareerFoundry website in the Project and Apps section.)

2. In your own words, describe the steps you would take to deploy a basic Django application locally on your system. 
To deploy a basic Django application locally:

1. Install Django and Create Project:
   - Install Django and create a project.

2. Set Up a Virtual Environment:
   - Create and activate a virtual environment.

3. Define a Django App:
   - Create a Django app within the project.

4. Configure Database and Migrate:
   - Configure database settings and run migrations.

5. Develop and Test:
   - Write and test application logic, views, and templates.

6. URL Routing and Integration:
   - Define URL patterns and integrate static/media files.

7. Ensure Functionality and Refine:
   - Thoroughly test and refine the application.

8. Deploy:
   - Follow deployment steps for production readiness.

3. Do some research about the Django admin site and write down how you’d use it during your web application development. During web application development, I would utilize the Django admin site to log in and access its interface, enabling me to manage models and perform CRUD operations (Create, Read, Update, Delete) on the data effortlessly. Additionally, I would customize the interface's appearance and behavior to suit specific needs, integrate authentication and permissions to control access based on user roles, utilize form validation and error handling for data integrity, implement logging and auditing of actions for troubleshooting and auditing purposes, and optimize the interface's performance, particularly when handling large datasets. The Django admin site proves invaluable in simplifying data management, offering a user-friendly, customizable interface, and enhancing efficiency during the development process.

